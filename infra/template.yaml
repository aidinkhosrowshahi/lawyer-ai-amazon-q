AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'SAM template for Case Management API for Amazon Q custom plugins

  '
Parameters:
  Stage:
    Type: String
    Default: dev
    Description: API Gateway stage name
  CaseFilesBucketName:
    Type: String
    Description: Name of the existing S3 bucket to use
    Default: s3uploaderui3fec1dbff0d74bb08b20946d2ea3871139e29-dev
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "GET,POST,PUT,DELETE,OPTIONS"
        AllowHeaders: "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token"
        AllowOrigin: "*"
  GetStepFunctionStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: getStepFunctionStatus.handler
      Events:
        GetStepFunctionStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /execution-status
            Method: GET
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:ListExecutions
                - states:GetExecutionHistory
              Resource: 
                - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:*:*'
                - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*'
      Events:
        GetStatus:
          Type: Api
          Properties:
            Path: /execution-status
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  CaseManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: cases.lambda_handler
      
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          CASES_TABLE:
            Ref: CasesTable
          UPLOAD_BUCKET_NAME:
            Ref: CaseFilesBucketName
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: CasesTable
        - S3CrudPolicy:
            BucketName:
              Ref: CaseFilesBucketName
      Events:
        CreateCase:
          Type: Api
          Properties:
            Path: /cases
            Method: POST
        GetCase:
          Type: Api
          Properties:
            Path: /cases/{caseId}
            Method: GET
  CasesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: caseId
        AttributeType: S
      KeySchema:
      - AttributeName: caseId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    
  S3MetadataProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: s3processor.lambda_handler
      Runtime: python3.9
      Architectures:
      - x86_64
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: CaseFilesBucketName
     
  
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Events:
        S3PDFUploaded:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: 
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - Ref: CaseFilesBucketName
                object:
                  key:
                    - wildcard: protected/*.pdf
      Definition:
        QueryLanguage: JSONata
        Comment: A description of my state machine
        StartAt: Pass
        States:
          Pass:
            Type: Pass
            Next: ACL creator
          ACL creator:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Output: '{% $states.result.Payload %}'
            Arguments:
              FunctionName: ${Lambda}
              Payload: '{% $states.input %}'
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            Next: Sync Amazon Q index
          Sync Amazon Q index:
            Type: Task
            Arguments:
              ApplicationId: d8e2017e-4955-4bec-8ad6-263ace996089
              DataSourceId: 4f876a94-712e-4ee2-b99e-4027d87e2500
              IndexId: 01a660c8-7306-4bd9-9108-ad16896b9102
            Resource: arn:aws:states:::aws-sdk:qbusiness:startDataSourceSyncJob
            Next: ListDataSourceSyncJobs
          ListDataSourceSyncJobs:
            Type: Task
            Arguments:
              ApplicationId: d8e2017e-4955-4bec-8ad6-263ace996089
              DataSourceId: 4f876a94-712e-4ee2-b99e-4027d87e2500
              IndexId: 01a660c8-7306-4bd9-9108-ad16896b9102
            Resource: arn:aws:states:::aws-sdk:qbusiness:listDataSourceSyncJobs
            Output:
              status: >-
                {%
                $states.result.History[ExecutionId=$states.input.ExecutionId].Status
                %}
              ExecutionId: '{% $states.input.ExecutionId %}'
            Assign:
              status: >-
                {%
                $states.result.History[ExecutionId=$states.input.ExecutionId].Status
                %}
              ExecutionId: '{% $states.input.ExecutionId %}'
            Next: Choice
          Choice:
            Type: Choice
            Choices:
              - Next: Failed
                Condition: '{% $status = ''FAILED'' %}'
              - Next: Wait
                Condition: '{% $status = ''SYNCING'' or $status = ''SYNCING_INDEXING'' %}'
              - Condition: '{% $status = ''SUCCEEDED'' %}'
                Next: Pass (1)
            Default: Pass (2)
          Pass (1):
            Type: Pass
            End: true
          Wait:
            Type: Wait
            Seconds: 3
            Next: ListDataSourceSyncJobs
          Failed:
            Type: Pass
            End: true
          Pass (2):
            Type: Pass
            End: true
      DefinitionSubstitutions:
        Lambda: !Sub 
          - "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionName}"
          - LambdaFunctionName: !Ref S3MetadataProcessorFunction
      Type: STANDARD
      Role:
        Fn::GetAtt:
          - Roleeb56218f
          - Arn
      Logging:
        Level: 'OFF'
        IncludeExecutionData: false
 
  Roleeb56218f:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: ConsolidatedStatesPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - qbusiness:StartDataSourceSyncJob
                  - qbusiness:ListDataSourceSyncJobs
                  - qbusiness:ListDataSources
                  - qbusiness:GetDataSource
                Resource:
                  - !Sub 'arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/d8e2017e-4955-4bec-8ad6-263ace996089'
                  - !Sub 'arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/*/index/01a660c8-7306-4bd9-9108-ad16896b9102'
                  - !Sub 'arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/*/index/*/data-source/4f876a94-712e-4ee2-b99e-4027d87e2500'




Outputs:
  CaseManagementApi:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/cases
  